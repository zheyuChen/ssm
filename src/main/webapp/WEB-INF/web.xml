<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <display-name>Archetype Created Web Application</display-name>

    <!--
        使用Spring提供过滤器CharacterEncodingFilter处理字符编码。

        1).encoding用来设置编码格式
        2).forceEncoding用来设置是否理会 request.getCharacterEncoding()方法，设置为true则强制覆盖之前的编码格式
    -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 配置org.springframework.web.filter.HiddenHttpMethodFilter可以把post请求转化为delete或put请求，这也是为啥表单用post方式提交，但是后台映射请求处理的时候
     可以区分为post delete put三种方式，统一了rest风格
     如何发送put或delete请求：1.需要配置HiddenHttpMethodFilter 2.需要发送post请求 3.需要在发送post请求时携带一个name="_method"的隐藏域，值为delete或put
     <input type="hidden" name="_method" value="put"/>  -->
<!--    <filter>-->
<!--        <filter-name>hiddenHttpMethodFilter</filter-name>-->
<!--        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>-->
<!--    </filter>-->
<!--    -->
<!--    <filter-mapping>-->
<!--        <filter-name>hiddenHttpMethodFilter</filter-name>-->
<!--        <url-pattern>/*</url-pattern>-->
<!--    </filter-mapping>-->

    <!-- 配置Spring MVC -->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 实际上也可以不通过contextConfigLocation来配置springmvc的配置文件，而使用默认的配置文件为：
          /WEB-INF/<servlet-name>-servlet.xml 比如本项目的就为 springspringmvcmybatisintegration-servlet.xml -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-*.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>